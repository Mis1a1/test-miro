{"version":3,"sources":["components/Chips.js","App.js","serviceWorker.js","index.js"],"names":["Chips","props","handleKeyDown","evt","includes","key","preventDefault","value","state","trim","isValid","setState","items","handleChange","target","error","handleDelete","item","filter","i","handlePaste","emails","clipboardData","getData","match","toBeAdded","email","isInList","addRandom","strEmail","charAt","Math","round","length","random","j","this","isEmail","test","className","class","map","type","onClick","placeholder","onKeyDown","onChange","onPaste","alert","React","Component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bd12721f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// import \"./styles.css\";\r\n\r\nexport default class Chips extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      items: [],\r\n      value: '',\r\n      error: null,\r\n    };\r\n  }\r\n  handleKeyDown = (evt) => {\r\n    if (['Enter', 'Tab', ','].includes(evt.key)) {\r\n      evt.preventDefault();\r\n\r\n      var value = this.state.value.trim();\r\n\r\n      if (value && this.isValid(value)) {\r\n        this.setState({\r\n          items: [...this.state.items, this.state.value],\r\n          value: '',\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChange = (evt) => {\r\n    this.setState({\r\n      value: evt.target.value,\r\n      error: null,\r\n    });\r\n  };\r\n\r\n  handleDelete = (item) => {\r\n    this.setState({\r\n      items: this.state.items.filter((i) => i !== item),\r\n    });\r\n  };\r\n\r\n  handlePaste = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    var paste = evt.clipboardData.getData('text');\r\n    var emails = paste.match(/[\\w\\d\\.-]+@[\\w\\d\\.-]+\\.[\\w\\d\\.-]+/g);\r\n\r\n    if (emails) {\r\n      var toBeAdded = emails.filter((email) => !this.isInList(email));\r\n\r\n      this.setState({\r\n        items: [...this.state.items, ...toBeAdded],\r\n      });\r\n    }\r\n  };\r\n\r\n  isValid(email) {\r\n    let error = null;\r\n\r\n    if (this.isInList(email)) {\r\n      error = `${email} has already been added.`;\r\n    }\r\n\r\n    if (!this.isEmail(email)) {\r\n      error = `${email} is not a valid email address.`;\r\n    }\r\n\r\n    if (error) {\r\n      this.setState({ error });\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  isInList(email) {\r\n    return this.state.items.includes(email);\r\n  }\r\n\r\n  isEmail(email) {\r\n    return /[\\w\\d\\.-]+@[\\w\\d\\.-]+\\.[\\w\\d\\.-]+/.test(email);\r\n  }\r\n\r\n  makeEmail() {\r\n    var strValues = 'abcdefg12345';\r\n    var strEmail = '';\r\n    var strTmp;\r\n    for (var i = 0; i < 10; i++) {\r\n      strTmp = strValues.charAt(Math.round(strValues.length * Math.random()));\r\n      strEmail = strEmail + strTmp;\r\n    }\r\n    strTmp = '';\r\n    strEmail = strEmail + '@';\r\n    for (var j = 0; j < 8; j++) {\r\n      strTmp = strValues.charAt(Math.round(strValues.length * Math.random()));\r\n      strEmail = strEmail + strTmp;\r\n    }\r\n    strEmail = strEmail + '.com';\r\n    return strEmail;\r\n  }\r\n\r\n  addRandom = () => {\r\n    var strValues = 'abcdefg12345';\r\n    var strEmail = '';\r\n    var strTmp;\r\n    for (var i = 0; i < 4; i++) {\r\n      strTmp = strValues.charAt(Math.round(strValues.length * Math.random()));\r\n      strEmail = strEmail + strTmp;\r\n    }\r\n    strTmp = '';\r\n    strEmail = strEmail + '@';\r\n    for (var j = 0; j < 3; j++) {\r\n      strTmp = strValues.charAt(Math.round(strValues.length * Math.random()));\r\n      strEmail = strEmail + strTmp;\r\n    }\r\n    strEmail = strEmail + '.com';\r\n    return (\r\n      strEmail,\r\n      this.setState({\r\n        items: [...this.state.items, strEmail],\r\n        value: '',\r\n      })\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className='board'>\r\n          <h1 className='headline'>\r\n            <span class='smallerFont'>Share </span>\r\n            <span class='bigFont'>Board name </span>\r\n            <span class='smallerFont'>with others</span>\r\n          </h1>\r\n          <div className='input-area'>\r\n            {this.state.items.map((item) => (\r\n              <div className='tag-item' key={item}>\r\n                {item}\r\n                <button\r\n                  type='button'\r\n                  className='button'\r\n                  onClick={() => this.handleDelete(item)}\r\n                >\r\n                  &times;\r\n                </button>\r\n              </div>\r\n            ))}\r\n\r\n            <input\r\n              className={'input ' + (this.state.error && ' has-error')}\r\n              value={this.state.value}\r\n              placeholder='add more peaople...'\r\n              onKeyDown={this.handleKeyDown}\r\n              onChange={this.handleChange}\r\n              onPaste={this.handlePaste}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='buttons-board'>\r\n          <button className='button-add' onClick={this.addRandom}>\r\n            Add email\r\n          </button>\r\n          <button\r\n            className='button-get'\r\n            onClick={() => {\r\n              alert(this.state.items.length);\r\n            }}\r\n          >\r\n            Get emails count\r\n          </button>\r\n        </div>\r\n\r\n        {this.state.error && <p className='error'>{this.state.error}</p>}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\n\nimport './App.css';\nimport Chips from './components/Chips';\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n        <Chips />\n    </div>\n      \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}